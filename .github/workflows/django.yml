name: Django CI/CD to PythonAnywhere (SSH)

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy via SSH
    runs-on: ubuntu-latest
    env:
      PA_USER: ${{ secrets.PA_USERNAME }}  # 用户名

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt --no-cache-dir
          pip list

      - name: Run Django tests
        run: |
          python manage.py check --deploy
          python manage.py test --noinput
        env:
          DJANGO_SETTINGS_MODULE: sustainableCampus.settings
          DJANGO_SECRET_KEY: "dummy-for-tests"
          DATABASE_URL: "sqlite:///:memory:"

      - name: SSH Setup
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Execute Deployment
        run: |
          ssh-keyscan -H ssh.pythonanywhere.com >> ~/.ssh/known_hosts
          ssh -t -o StrictHostKeyChecking=no ${PA_USER}@ssh.pythonanywhere.com << 'DEPLOY'
          # 从 Secrets 注入变量
          PROJECT_DIR="${{ secrets.PA_PROJECT_DIR }}"
          VENV_NAME="${{ secrets.PA_VENV_NAME }}"
          
          echo "===== 部署调试信息 ====="
          echo "项目目录: \$PROJECT_DIR"
          echo "虚拟环境: \$VENV_NAME"

          # 强制创建目录并进入
          mkdir -p "\$PROJECT_DIR"
          cd "\$PROJECT_DIR" || { echo "目录不存在且创建失败"; exit 1; }

          # 初始化 Git 并设置 SSH 协议仓库
          if [ ! -d .git ]; then
            git init
            git remote add origin git@github.com:jess-cl/ecm2434sustainable-campus.git  # 改为 SSH URL
          fi

          # 配置 Git SSH 认证
          export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa"  # 使用 PythonAnywhere 上的密钥

          # 强制同步代码
          git fetch origin main
          git checkout -b main
          git reset --hard origin/main
          git clean -fd

          # 验证代码文件存在性
          echo "当前目录: $(pwd)"
          ls -la
          if [ ! -f requirements.txt ]; then
            echo "错误: requirements.txt 不存在！"
            exit 1
          fi

          # 虚拟环境操作
          if [ ! -f ~/.virtualenvs/\$VENV_NAME/bin/activate ]; then
            python -m venv ~/.virtualenvs/\$VENV_NAME
          fi
          source ~/.virtualenvs/\$VENV_NAME/bin/activate

          # 安装依赖
          pip install --upgrade pip
          pip install -r requirements.txt

          # Django 操作
          python manage.py migrate --noinput
          python manage.py collectstatic --noinput --clear

          # 触发重载
          touch ~/reload.trigger

          # 健康检查
          curl -sf http://${PA_USER}.pythonanywhere.com/healthcheck | grep OK || exit 1
          echo "===== 部署完成 ====="
          DEPLOY

      - name: Post-Deploy Verification
        run: |
          echo "已部署的最新提交:"
          ssh -o StrictHostKeyChecking=no ${PA_USER}@ssh.pythonanywhere.com \
            "cd ${{ secrets.PA_PROJECT_DIR }} && git log -1 --pretty='%h - %an - %s'"
