name: Django CI/CD to PythonAnywhere (SSH)

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy via SSH
    runs-on: ubuntu-latest
    env:
      PA_USER: ${{ secrets.PA_USERNAME }}  # PythonAnywhere 用户名

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt --no-cache-dir
          pip list

      - name: Run Django tests
        run: |
          python manage.py check --deploy
          python manage.py test --noinput
        env:
          DJANGO_SETTINGS_MODULE: sustainableCampus.settings
          DJANGO_SECRET_KEY: "dummy-for-tests"
          DATABASE_URL: "sqlite:///:memory:"

      - name: SSH Setup
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # 从 Secrets 加载 SSH 密钥

      - name: Execute Deployment
        run: |
          # 将 PythonAnywhere 主机添加到已知主机
          ssh-keyscan -H ssh.pythonanywhere.com >> ~/.ssh/known_hosts

          # 执行 SSH 部署命令
          ssh -t -o StrictHostKeyChecking=no ${PA_USER}@ssh.pythonanywhere.com << 'DEPLOY'
          # 从 GitHub Secrets 注入环境变量
          export PROJECT_DIR="${{ secrets.PA_PROJECT_DIR }}"
          export VENV_NAME="${{ secrets.PA_VENV_NAME }}"
          
          echo "===== 开始部署 ====="
          echo "项目目录: \$PROJECT_DIR"
          echo "虚拟环境: \$VENV_NAME"

          # 检查项目目录是否存在
          if [ ! -d "\$PROJECT_DIR" ]; then
            echo "错误：项目目录 \$PROJECT_DIR 不存在！"
            exit 1
          fi

          # 进入项目目录
          cd \$PROJECT_DIR || exit 1

          # 初始化 Git 仓库（如果不存在）
          if [ ! -d .git ]; then
            echo "初始化 Git 仓库..."
            git init
            git remote add origin ${{ github.repositoryUrl }}
          fi

          # 强制同步代码
          echo "拉取最新代码..."
          git fetch --all
          git reset --hard origin/main
          git clean -fd

          # 虚拟环境操作
          echo "激活虚拟环境..."
          if [ ! -f ~/.virtualenvs/\$VENV_NAME/bin/activate ]; then
            echo "创建虚拟环境..."
            python -m venv ~/.virtualenvs/\$VENV_NAME
          fi
          source ~/.virtualenvs/\$VENV_NAME/bin/activate

          # 安装依赖
          echo "安装依赖..."
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt --no-cache-dir

          # Django 操作
          echo "执行数据库迁移..."
          python manage.py migrate --noinput
          
          echo "收集静态文件..."
          python manage.py collectstatic --noinput --clear

          # 重载应用（PythonAnywhere 专用命令）
          echo "重载应用..."
          reload_webapp || touch ~/reload.trigger

          # 健康检查
          echo "验证健康检查..."
          curl -sf http://${PA_USER}.pythonanywhere.com/healthcheck | grep OK || exit 1

          echo "===== 部署成功 ====="
          DEPLOY

      - name: Post-Deploy Verification
        run: |
          echo "已部署的最新提交:"
          ssh -o StrictHostKeyChecking=no ${PA_USER}@ssh.pythonanywhere.com \
            "cd ${{ secrets.PA_PROJECT_DIR }} && git log -1 --pretty='%h - %an - %s'"
